--- tests-py2/annotator/test_case_count_annotator.py	(original)
+++ tests-py2/annotator/test_case_count_annotator.py	(refactored)
@@ -6,7 +6,7 @@
 
 import sys
 import unittest
-import test_utils
+from . import test_utils
 
 sys.path = ['./'] + sys.path
 
@@ -40,7 +40,7 @@
     def test_strings_and_unicode(self):
 
         examples = [("The number of cases exceeds 30", 30),
-                    (u"The number of cases exceeds 30", 30)]
+                    ("The number of cases exceeds 30", 30)]
 
         for example, actual_count in examples:
             doc = AnnoDoc(example)
--- tests-py2/annotator/test_geoname_annotator.py	(original)
+++ tests-py2/annotator/test_geoname_annotator.py	(refactored)
@@ -63,7 +63,7 @@
         ])
 
     def test_bug_causing_sentence(self):
-        text = u"""
+        text = """
--- tests-py2/annotator/test_old_case_count_annotator.py	(original)
+++ tests-py2/annotator/test_old_case_count_annotator.py	(refactored)
@@ -2,7 +2,7 @@
 # coding=utf8
 import sys
 import unittest
-import test_utils
+from . import test_utils
 
 sys.path = ['./'] + sys.path
 
@@ -20,7 +20,7 @@
         to take an extremely long time to parse as is.
         https://github.com/clips/pattern/issues/104
         """
--- tests-py2/annotator/test_patient_info_annotator.py	(original)
+++ tests-py2/annotator/test_patient_info_annotator.py	(refactored)
@@ -2,7 +2,7 @@
 # coding=utf8
 import sys
 import unittest
-import test_utils
+from . import test_utils
 sys.path = ['./'] + sys.path
 
 from annotator.annotator import AnnoDoc
--- tests-py2/annotator/test_pattern_bugs.py	(original)
+++ tests-py2/annotator/test_pattern_bugs.py	(refactored)
@@ -2,7 +2,7 @@
 # coding=utf8
 import sys
 import unittest
-import test_utils
+from . import test_utils
 sys.path = ['./'] + sys.path
 
 from annotator.annotator import AnnoDoc
@@ -24,11 +24,11 @@
         doc.add_tier(self.annotator)
 
     def test_match_long_ellipsis2(self):
-        doc = AnnoDoc(u"""They will also be used to give the all-clear for Ebola patients who survive the disease...""")
+        doc = AnnoDoc("""They will also be used to give the all-clear for Ebola patients who survive the disease...""")
         doc.add_tier(self.annotator)
 
     def test_end(self):
--- tests-py2/annotator/test_utils.py	(original)
+++ tests-py2/annotator/test_utils.py	(refactored)
@@ -3,7 +3,7 @@
     Iterates over all the items in nested dictionaries returning path arrays
     with values.
     """
-    for k,v in d.items():
+    for k,v in list(d.items()):
         if isinstance(v, dict):
             for kpath, v2 in nested_items(v):
                 yield [k] + kpath, v2
@@ -13,7 +13,7 @@
     if not isinstance(d, dict):
         #print "Could not get %s in non-dict %s" % (path, d)
         return None
-    if isinstance(path, basestring):
+    if isinstance(path, str):
         path = path.split('.')
     if len(path) == 1:
         return d.get(path[0], default)
